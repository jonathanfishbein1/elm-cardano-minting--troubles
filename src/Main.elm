port module Main exposing (..)

import Browser
import Bytes.Comparable
import Bytes.Map
import Cardano
import Cardano.Address
import Cardano.Cip30
import Cardano.Cip67
import Cardano.Data
import Cardano.Script
import Cardano.Utxo
import Cardano.Value
import Html
import Html.Attributes
import Html.Events
import Integer
import Json.Decode
import Natural


main =
    -- The main entry point of our app
    -- More info about that in the Browser package docs:
    -- https://package.elm-lang.org/packages/elm/browser/latest/
    Browser.element
        { init = init
        , update = update
        , subscriptions = \_ -> fromWallet WalletMsg
        , view = view
        }


port toWallet : Json.Decode.Value -> Cmd msg


port fromWallet : (Json.Decode.Value -> msg) -> Sub msg


type Msg
    = WalletMsg Json.Decode.Value
    | ConnectButtonClicked { id : String }
    | Mint



-- MODEL


type Model
    = Startup
    | WalletDiscovered (List Cardano.Cip30.WalletDescriptor)
    | WalletLoading
        { wallet : Cardano.Cip30.Wallet
        , utxos : List ( Cardano.Utxo.OutputReference, Cardano.Utxo.Output )
        }
    | WalletLoaded
        { wallet : Cardano.Cip30.Wallet
        , utxos : List ( Cardano.Utxo.OutputReference, Cardano.Utxo.Output )
        , changeAddress : Cardano.Address.Address
        }
    | Minted
        { wallet : Cardano.Cip30.Wallet
        , utxos : List ( Cardano.Utxo.OutputReference, Cardano.Utxo.Output )
        , changeAddress : Cardano.Address.Address
        }


init : () -> ( Model, Cmd Msg )
init _ =
    ( Startup
    , toWallet <| Cardano.Cip30.encodeRequest Cardano.Cip30.discoverWallets
    )



-- UPDATE


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case ( msg, model ) of
        ( WalletMsg value, _ ) ->
            case ( Json.Decode.decodeValue Cardano.Cip30.responseDecoder value, model ) of
                -- We just discovered available wallets
                ( Ok (Cardano.Cip30.AvailableWallets wallets), Startup ) ->
                    ( WalletDiscovered wallets, Cmd.none )

                -- We just connected to the wallet, let’s ask for the available utxos
                ( Ok (Cardano.Cip30.EnabledWallet wallet), WalletDiscovered _ ) ->
                    ( WalletLoading { wallet = wallet, utxos = [] }
                    , toWallet <| Cardano.Cip30.encodeRequest <| Cardano.Cip30.getUtxos wallet { amount = Nothing, paginate = Nothing }
                    )

                -- We just received the utxos, let’s ask for the main change address of the wallet
                ( Ok (Cardano.Cip30.ApiResponse { walletId } (Cardano.Cip30.WalletUtxos utxos)), WalletLoading { wallet } ) ->
                    ( WalletLoading { wallet = wallet, utxos = utxos }
                    , toWallet (Cardano.Cip30.encodeRequest (Cardano.Cip30.getChangeAddress wallet))
                    )

                ( Ok (Cardano.Cip30.ApiResponse { walletId } (Cardano.Cip30.ChangeAddress address)), WalletLoading { wallet, utxos } ) ->
                    ( WalletLoaded { wallet = wallet, utxos = utxos, changeAddress = address }
                    , Cmd.none
                    )

                _ ->
                    ( model, Cmd.none )

        ( ConnectButtonClicked { id }, WalletDiscovered descriptors ) ->
            ( model, toWallet (Cardano.Cip30.encodeRequest (Cardano.Cip30.enableWallet { id = id, extensions = [] })) )

        ( Mint, WalletLoaded wallet ) ->
            case
                ( mintScriptResult mintScriptString
                , mintScriptFlatResult mintScriptFlatString
                )
            of
                ( Ok (Cardano.Script.Plutus mintScript), Ok (Cardano.Script.Plutus mintScriptFlat) ) ->
                    let
                        lockScript =
                            { hash = Cardano.Script.hash (Cardano.Script.Plutus mintScriptFlat)
                            , compiledCode = mintScript.script
                            }

                        tx =
                            mint
                                wallet
                                lockScript
                    in
                    case tx of
                        Ok goodTx ->
                            let
                                _ =
                                    Debug.log "goodTx " goodTx
                            in
                            ( Minted wallet
                            , toWallet
                                (Cardano.Cip30.encodeRequest
                                    (Cardano.Cip30.signTx wallet.wallet
                                        { partialSign = False }
                                        goodTx.tx
                                    )
                                )
                            )

                        Err e ->
                            let
                                _ =
                                    Debug.log "badTx " e
                            in
                            ( model, Cmd.none )

                _ ->
                    let
                        _ =
                            Debug.log "e " e
                    in
                    ( model, Cmd.none )

        _ ->
            ( model, Cmd.none )



-- VIEW


view : Model -> Html.Html Msg
view model =
    case model of
        Startup ->
            Html.div [] [ Html.div [] [ Html.text "Hello Cardano!" ] ]

        WalletDiscovered availableWallets ->
            Html.div []
                [ Html.div [] [ Html.text "Hello Cardano!" ]
                , Html.div [] [ Html.text "CIP-30 wallets detected:" ]
                , viewAvailableWallets availableWallets
                ]

        WalletLoading _ ->
            Html.div [] [ Html.text "Loading wallet assets ..." ]

        WalletLoaded { wallet, utxos, changeAddress } ->
            Html.div []
                [ Html.div [] [ Html.text <| "Wallet: " ++ (Cardano.Cip30.walletDescriptor wallet).name ]
                , Html.div [] [ Html.text <| "Address: " ++ (Cardano.Address.toBytes changeAddress |> Bytes.Comparable.toHex) ]
                , Html.div [] [ Html.text <| "UTxO count: " ++ String.fromInt (List.length utxos) ]
                , Html.button [ Html.Events.onClick Mint ] []
                ]

        _ ->
            Html.div [] []


viewAvailableWallets : List Cardano.Cip30.WalletDescriptor -> Html.Html Msg
viewAvailableWallets wallets =
    let
        walletDescription : Cardano.Cip30.WalletDescriptor -> String
        walletDescription w =
            "id: " ++ w.id ++ ", name: " ++ w.name

        walletIcon : Cardano.Cip30.WalletDescriptor -> Html.Html Msg
        walletIcon { icon } =
            Html.img [ Html.Attributes.src icon, Html.Attributes.height 32 ] []

        connectButton { id } =
            Html.button [ Html.Events.onClick (ConnectButtonClicked { id = id }) ] [ Html.text "connect" ]

        walletRow w =
            Html.div [] [ walletIcon w, Html.text (walletDescription w), connectButton w ]
    in
    Html.div [] (List.map walletRow wallets)


mint wallet { hash, compiledCode } =
    let
        mintedTokenAssetNameText =
            "aitoken"

        mintedTokenAssetName =
            Bytes.Comparable.fromText
                mintedTokenAssetNameText

        referenceTokenName =
            { label = 100
            , assetName = mintedTokenAssetName
            }

        plutusScriptWitness : Cardano.PlutusScriptWitness
        plutusScriptWitness =
            { script =
                ( Cardano.Script.PlutusV3
                , Cardano.WitnessValue compiledCode
                )
            , redeemerData = \_ -> Cardano.Data.Constr Natural.zero []
            , requiredSigners = []
            }

        scriptWitness : Cardano.ScriptWitness
        scriptWitness =
            Cardano.PlutusWitness
                plutusScriptWitness
    in
    [ Cardano.MintBurn
        { policyId = hash
        , assets =
            Bytes.Map.singleton (Cardano.Cip67.toBytes referenceTokenName)
                Integer.one
        , scriptWitness = scriptWitness
        }
    , Cardano.SendTo wallet.changeAddress
        (Cardano.Value.onlyToken hash
            (Cardano.Cip67.toBytes referenceTokenName)
            Natural.one
        )
    ]
        |> Cardano.finalize (localStateUtxos wallet.utxos)
            []


localStateUtxos : List ( Cardano.Utxo.OutputReference, a ) -> Cardano.Utxo.RefDict a
localStateUtxos myUtxos =
    Cardano.Utxo.refDictFromList myUtxos


mintScriptString : String
mintScriptString =
    ""


mintScriptFlatString : String
mintScriptFlatString =
    ""


mintScriptBytesResult mSS =
    case Bytes.Comparable.fromHex mSS of
        Just x ->
            Ok x

        Nothing ->
            Err "error converting mint script into bytes"


mintScriptFlatBytesResult mSS =
    case Bytes.Comparable.fromHex mSS of
        Just x ->
            Ok x

        Nothing ->
            Err "error converting mint script into bytes"


mintPlutusScriptResult : String -> Result String { version : Cardano.Script.PlutusVersion, script : Bytes.Comparable.Bytes a }
mintPlutusScriptResult mMSB =
    Result.map
        (\x ->
            { version = Cardano.Script.PlutusV3
            , script = x
            }
        )
        (mintScriptBytesResult mMSB)


mintFlatPlutusScriptResult mMSB =
    Result.map
        (\x ->
            { version = Cardano.Script.PlutusV3
            , script = x
            }
        )
        (mintScriptBytesResult mMSB)


mintScriptResult : String -> Result String Cardano.Script.Script
mintScriptResult mMSB =
    Result.map Cardano.Script.Plutus
        (mintPlutusScriptResult
            mMSB
        )


mintScriptFlatResult mMSB =
    Result.map Cardano.Script.Plutus
        (mintPlutusScriptResult
            mMSB
        )
